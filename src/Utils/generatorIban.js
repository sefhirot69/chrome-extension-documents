import {randDigits, randomValueFromArray} from "./utilsRandom";

const banks = ["0001", "0003", "0004", "0008", "0009", "0010", "0011", "0013", "0015", "0016", "0019", "0020", "0021", "0024", "0029", "0030", "0031", "0035", "0036", "0041", "0042", "0043", "0044", "0045", "0046", "0049", "0050", "0053", "0056", "0057", "0058", "0059", "0061", "0062", "0063", "0065", "0067", "0068", "0069", "0072", "0073", "0075", "0076", "0077", "0078", "0081", "0082", "0083", "0085", "0086", "0087", "0093", "0094", "0095", "0097", "0099", "0100", "0101", "0102", "0103", "0104", "0107", "0108", "0109", "0112", "0113", "0114", "0118", "0119", "0121", "0122", "0124", "0125", "0127", "0128", "0129", "0130", "0131", "0132", "0133", "0136", "0137", "0138", "0142", "0144", "0145", "0149", "0151", "0152", "0154", "0155", "0156", "0159", "0160", "0161", "0162", "0167", "0168", "0169", "0182", "0184", "0185", "0186", "0188", "0190", "0196", "0198", "0200", "0202", "0205", "0208", "0209", "0210", "0211", "0216", "0218", "0219", "0220", "0223", "0224", "0225", "0226", "0227", "0229", "0230", "0231", "0232", "0233", "0234", "0235", "0237", "0238", "0239", "0240", "0486", "0487", "0488", "0490", "1000", "1001", "1004", "1005", "1156", "1164", "1193", "1210", "1234", "1236", "1249", "1251", "1255", "1301", "1302", "1451", "1457", "1459", "1460", "1463", "1465", "1467", "1469", "1470", "1472", "1473", "1474", "1475", "1479", "1480", "1484", "1485", "1488", "1490", "1491", "1494", "1497", "1501", "1502", "1505", "1513", "1522", "1524", "1525", "1534", "1538", "1544", "1545", "2000", "2001", "2005", "2006", "2007", "2010", "2011", "2012", "2013", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2024", "2025", "2028", "2030", "2031", "2032", "2033", "2034", "2035", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2045", "2046", "2048", "2049", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2065", "2066", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099", "2100", "2101", "2102", "2103", "2104", "2105", "2106", "2107", "2108", "3001", "3005", "3007", "3008", "3009", "3016", "3017", "3018", "3020", "3021", "3022", "3023", "3024", "3025", "3029", "3035", "3045", "3054", "3056", "3057", "3058", "3059", "3060", "3061", "3062", "3063", "3064", "3065", "3066", "3067", "3068", "3069", "3070", "3072", "3076", "3078", "3079", "3080", "3081", "3082", "3083", "3084", "3085", "3089", "3092", "3093", "3094", "3095", "3096", "3098", "3102", "3104", "3105", "3108", "3110", "3111", "3112", "3113", "3114", "3115", "3116", "3117", "3118", "3119", "3121", "3123", "3127", "3128", "3129", "3130", "3131", "3134", "3135", "3137", "3138", "3140", "3141", "3144", "3146", "3147", "3150", "3152", "3157", "3159", "3160", "3161", "3162", "3163", "3165", "3166", "3167", "3171", "3172", "3174", "3177", "3179", "3181", "3183", "3186", "3187", "3188", "3189", "3190", "3191", "6814", "6852", "8512", "8835", "9000"];
const t = "es";

const generatorIban = () => {

    const generateCCC = () => {
        const r = randomValueFromArray(banks), a = randDigits(4), e = randDigits(10);
        return r + a + calculateDC(r + a + "--" + e) + e
    }

    const calculateDC = (r) => {
        for (var a = [1, 2, 4, 8, 5, 10, 9, 7, 3, 6], e = 0, n = 0, t = 0; t <= 7; t++) e += parseInt(r.charAt(t)) * a[t + 2];
        for (11 === (e = 11 - e % 11) ? e = 0 : 10 === e && (e = 1), t = 10; t <= 19; t++) n += parseInt(r.charAt(t)) * a[t - 10];
        return 11 === (n = 11 - n % 11) ? n = 0 : 10 === n && (n = 1), e.toString() + n.toString()
    }

    const transform = (r, n) => {
        const t = (r = a(r)).substr(r.length - 24, 24), u = r.substr(r.length - 20, 20);
        return l(r) || f(r) ? l(r) && !e(t) ? "Error: IBAN incorrecto" : s(u) ? l(r) ? c(t) : c(o(u, n)) : "Error: CCC incorrecto" : "Error: No es IBAN ni CCC"
    }

    const calculate = (r, n) => {
        let u;
        let e;
        let s;
        if (f(r = a(r))) {
            const t = r.substr(8, 2);
            return s = t, new RegExp("^(\\d{" + s.length + "})$", "i").test(s) || (r = (u = a(u = r)).substr(0, 8) + (b((e = i(a(u), " ").split(" "))[0] + e[1]) + "") + b(e[3]) + u.substr(10, 10)), o(r, n)
        }
        return r;
    }

    const format = (r, n) => {
        return l(r = a(r)) ? c(r, n) : f(r) ? i(r, n) : 16 === r.length ? function (r, n) {
            r = a(r);
            for (var t = [], u = 0; u < 4; u++) t.push(r.substr(4 * u, 4));
            return t.join(n)
        }(r, n) : ""
    }

    const o = (r, n) => {
        return r = a(r), (n = (null == n ? t : n).toUpperCase()) + g(98 - v(r + h(n) + "00", 97), 2) + r;
    }

    const e = (r) => {
        const n = (r = a(r)).substr(0, 2), t = r.substr(2, 2), u = r.substr(4, 20) + h(n) + t;
        let resto;
        return resto = v(u, 97), 1 === resto
    }

    const s = (r) => {
        const n = i(r = a(r), " ").split(" ");
        return b(n[0] + n[1]) + "" + b(n[3]) === n[2]
    }

    const i = (r, n) => {
        return null == n && (n = "-"), (r = a(r)).substr(0, 4) + n + r.substr(4, 4) + n + r.substr(8, 2) + n + r.substr(10, 10)
    }

    const c = (r, n) => {
        r = a(r); null == n && (n = " ");
        for (var t = [], u = 0; u < 6; u++) t.push(r.substr(4 * u, 4));
        return t.join(n)
    }

    const f = (r) => {
        return 20 === r.length
    }

    const l = (r) => {
        return 24 === r.length
    }

    const a = (r) => {
        return r.replace(/IBAN/g, "").replace(/ /g, "").replace(/-/g, "")
    }

    const v = (r, n) => {
        for (var t = r.length, u = 0, e = 0; e < t; e += 10) {
            u = (u + "" + r.substr(e, 10)) % n
        }
        return u
    }

    const b = (r) => {
        for (var n = [1, 2, 4, 8, 5, 10, 9, 7, 3, 6], t = 0, u = (r = g(r, 10), 0); u < r.length; u++) t += parseInt(r[u]) * n[u];
        const e = t % 11;
        return e < 2 ? e : 11 - e
    }

    const g = (r, n) => {
        for (r += ""; r.length < n;) r = "0" + r;
        return r
    }

    const h = (r) => {
        for (var n = [], t = 0; t < r.length; t++) {
            const u = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(r[t]);
            n.push(u < 0 ? "-" : u)
        }
        return n.join("")
    }

    return transform(generateCCC()).split(" ").join("");
}

const codesIban = [
    {codigo: "2100", nombre: "Caixabank", bic: "CAIX"},
    {
        codigo: "0182",
        nombre: "BBVA",
        bic: "BBVA"
    }, {codigo: "0081", nombre: "Banc Sabadell", bic: "BSAB"}, {
        codigo: "0049",
        nombre: "Banco Santander",
        bic: "BSAB"
    }, {codigo: "2038", nombre: "Bankia", bic: "CAHM"}, {
        codigo: "0128",
        nombre: "Bankinter",
        bic: "BKBK"
    }, {codigo: "2103", nombre: "Unicaja", bic: "UCJA"}, {
        codigo: "2085",
        nombre: "Ibercaja",
        bic: "CAZR"
    }, {codigo: "2095", nombre: "Kutxabank", bic: "BASK"}, {
        codigo: "2080",
        nombre: "Abanca",
        bic: "CAGL"
    }, {codigo: "2048", nombre: "Liberbank", bic: "CECA"}];
codesIban.sort(function (o, a) {
    var i = o.nombre.toLowerCase(), n = a.nombre.toLowerCase();
    return i < n ? -1 : n < i ? 1 : 0
});
const codesSpainDit = {};
codesIban.forEach((index) => {
    codesSpainDit[index.codigo] = index;
});

export default generatorIban;
